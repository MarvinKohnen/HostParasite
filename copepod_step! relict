
function copepod_step!(copepod, model) #Copepod is able to detect pray at 1mm (parasites want to stay in that vicinity)
    copepod.age += 1
    if rand(model.rng) < model.copepod_mortality
        remove_agent!(copepod, model)
        @info("This copepod with ID: " * string(copepod.id) * " died of Mortality")
        return
    end
    if rand(model.rng) <= copepod.reproduction_prob * model.dt
        copepod_reproduce!(copepod, model)
    end
   
    if copepod.energy <= 15
        @info("This copepod called copepod_eat! with ID: " * string(copepod.id) * ", since he has this much energy left: " * string(copepod.energy))
        copepod_eat!(copepod, model)
    end
    copepod.energy -= model.dt
    @info("This copepod with Id: " * string(copepod.id) * ", has now this much energy left " * string(copepod.energy))
    
    if copepod.energy < 0
        remove_agent!(copepod, model, model.pathfinder)
        @info("This copepod with Id: " * string(copepod.id) * ", died of energyloss")
        return
    end
    @info("infection status copepod: " * string(copepod.infected))
    if copepod.infected == 1
        move_along_route!(copepod, model, model.pathfinder, model.copepod_vel, model.dt)
        copepod_eat!(copepod, model)
        copepod.infectiondays +=1
        @info("copepod with ID: " * string(copepod.id) * " is now infected for " * string(copepod.infectiondays) * "steps")
        copepod.energy -= model.dt
    end
    
    
    if copepod.infectiondays <= 2#12 
        prey = [x.pos for x in nearby_agents(copepod, model, model.copepod_vision) if x.type == :grazer]
        cpredators = [x.pos for x in nearby_agents(copepod, model, model.copepod_vision) if x.type == :stickleback]
        for predator in cpredators
            @info("copepod with ID: " * string(copepod.id) * " is fleeing from the Stickleback with ID: " * string(predator.pos))
        end
        cdirection = (0., 0.)
        caway_direction = (0.,0.)
        if !isempty(cpredators) 
            @info("This copepod with ID: " * string(copepod.id) * ", is fleeing from predators")
            caway_direction = []
            for i in 1:length(cpredators)
                if i == 1
                    caway_direction = (copepod.pos .- cpredators[i]) 
                else    
                    caway_direction = caway_direction .- cpredators[i]
                end
            end
        end 
        
        ctoward_direction = (0.,0.)
        if !isempty(prey)
            ctoward_direction = []
            for i in 1:length(prey)
                if i == 1
                    ctoward_direction = (copepod.pos .+ prey[i])
                else
                    ctoward_direction = ctoward_direction .+ prey[i]
                end
            end 
        end

        cdirection = cdirection .+ ctoward_direction ./ norm(ctoward_direction) .^2 .+ caway_direction ./ norm(caway_direction) .^2   #set new direction 
            
        if all(caway_direction .≈ 0.) #meaning the sticklebacks are on top of the copepod
            #move anywhere
            chosen_position = random_walkable(copepod.pos, model, model.pathfinder, model.copepod_vision) 
        else
            #Normalize the resultant direction and get the ideal position to move it
            cdirection = cdirection ./norm(cdirection)
            #move to a random position in the general direction away from predators and toward prey
            cposition = copepod.pos .+ cdirection .* (model.copepod_vision / 2.)
            chosen_position = random_walkable(cposition, model, model.pathfinder, model.copepod_vision / 2.)
        end
        set_target!(copepod, chosen_position, model.pathfinder)
        
        if isempty(prey) && isempty(cpredators)
            #move anywhere if no prey nearby
            set_target!(
                copepod,
                random_walkable(copepod.pos, model, model.pathfinder, model.copepod_vision),
                model.pathfinder
            )
            return
        end

    else #if is_stationary(copepod, model.pathfinder)
        prey = [x.pos for x in nearby_agents(copepod, model, model.copepod_vision) if x.type == :grazer]
        cdirection = (0., 0.)
        ctoward_direction = (0.,0.)
        if !isempty(prey)
            @info("This copepod with ID: " * string(copepod.id) * ", is hunting prey")
            ctoward_direction = []
            for i in 1:length(prey)
                if i == 1
                    ctoward_direction = (copepod.pos .+ prey[i])
                else
                    ctoward_direction = ctoward_direction .+ prey[i]
                end
            end 


            cdirection = cdirection .+ ctoward_direction ./ norm(ctoward_direction) .^2 .+ caway_direction ./ norm(caway_direction) .^2   #set new direction 
                
            if all(cdirection .≈ 0.) #meaning the sticklebacks are on top of the copepod
                #move anywhere
                chosen_position = random_walkable(copepod.pos, model, model.pathfinder, model.copepod_vision) 
            else
                #Normalize the resultant direction and get the ideal position to move it
                cdirection = cdirection ./norm(cdirection)
                #move to a random position in the general direction away from predators and toward prey
                cposition = copepod.pos .+ cdirection .* (model.copepod_vision / 2.) 
                chosen_position = random_walkable(cposition, model, model.pathfinder, model.copepod_vision / 2.)
            end
            set_target!(copepod, chosen_position, model.pathfinder)
        end 

        if isempty(prey) 
            #move anywhere if no prey nearby
            set_target!(
                copepod,
                random_walkable(copepod.pos, model, model.pathfinder, model.copepod_vision),
                model.pathfinder
            )
            return
        end

    move_along_route!(copepod, model, model.pathfinder, model.copepod_vel, model.dt)
end 
end
